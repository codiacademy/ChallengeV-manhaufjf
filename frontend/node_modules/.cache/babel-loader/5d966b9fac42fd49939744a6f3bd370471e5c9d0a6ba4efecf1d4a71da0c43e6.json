{"ast":null,"code":"import { jsx, Fragment } from 'react/jsx-runtime';\nimport { useMemo, useRef, useState, useContext } from 'react';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { invariant } from '../../utils/errors.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { onlyElements, getChildKey } from './utils.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({\n  children,\n  exitBeforeEnter,\n  custom,\n  initial = true,\n  onExitComplete,\n  presenceAffectsLayout = true,\n  mode = \"sync\"\n}) => {\n  invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\");\n  /**\n   * Filter any children that aren't ReactElements. We can only track components\n   * between renders with a props.key.\n   */\n  const presentChildren = useMemo(() => onlyElements(children), [children]);\n  /**\n   * Track the keys of the currently rendered children. This is used to\n   * determine which children are exiting.\n   */\n  const presentKeys = presentChildren.map(getChildKey);\n  /**\n   * If `initial={false}` we only want to pass this to components in the first render.\n   */\n  const isInitialRender = useRef(true);\n  /**\n   * A ref containing the currently present children. When all exit animations\n   * are complete, we use this to re-render the component with the latest children\n   * *committed* rather than the latest children *rendered*.\n   */\n  const pendingPresentChildren = useRef(presentChildren);\n  /**\n   * Track which exiting children have finished animating out.\n   */\n  const exitComplete = useConstant(() => new Map());\n  /**\n   * Save children to render as React state. To ensure this component is concurrent-safe,\n   * we check for exiting children via an effect.\n   */\n  const [diffedChildren, setDiffedChildren] = useState(presentChildren);\n  const [renderedChildren, setRenderedChildren] = useState(presentChildren);\n  useIsomorphicLayoutEffect(() => {\n    isInitialRender.current = false;\n    pendingPresentChildren.current = presentChildren;\n    /**\n     * Update complete status of exiting children.\n     */\n    for (let i = 0; i < renderedChildren.length; i++) {\n      const key = getChildKey(renderedChildren[i]);\n      if (!presentKeys.includes(key)) {\n        if (exitComplete.get(key) !== true) {\n          exitComplete.set(key, false);\n        }\n      } else {\n        exitComplete.delete(key);\n      }\n    }\n  }, [renderedChildren, presentKeys.length, presentKeys.join(\"-\")]);\n  const exitingChildren = [];\n  if (presentChildren !== diffedChildren) {\n    let nextChildren = [...presentChildren];\n    /**\n     * Loop through all the currently rendered components and decide which\n     * are exiting.\n     */\n    for (let i = 0; i < renderedChildren.length; i++) {\n      const child = renderedChildren[i];\n      const key = getChildKey(child);\n      if (!presentKeys.includes(key)) {\n        nextChildren.splice(i, 0, child);\n        exitingChildren.push(child);\n      }\n    }\n    /**\n     * If we're in \"wait\" mode, and we have exiting children, we want to\n     * only render these until they've all exited.\n     */\n    if (mode === \"wait\" && exitingChildren.length) {\n      nextChildren = exitingChildren;\n    }\n    setRenderedChildren(onlyElements(nextChildren));\n    setDiffedChildren(presentChildren);\n    /**\n     * Early return to ensure once we've set state with the latest diffed\n     * children, we can immediately re-render.\n     */\n    return;\n  }\n  if (process.env.NODE_ENV !== \"production\" && mode === \"wait\" && renderedChildren.length > 1) {\n    console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n  }\n  /**\n   * If we've been provided a forceRender function by the LayoutGroupContext,\n   * we can use it to force a re-render amongst all surrounding components once\n   * all components have finished animating out.\n   */\n  const {\n    forceRender\n  } = useContext(LayoutGroupContext);\n  return jsx(Fragment, {\n    children: renderedChildren.map(child => {\n      const key = getChildKey(child);\n      const isPresent = presentChildren === renderedChildren || presentKeys.includes(key);\n      const onExit = () => {\n        if (exitComplete.has(key)) {\n          exitComplete.set(key, true);\n        } else {\n          return;\n        }\n        let isEveryExitComplete = true;\n        exitComplete.forEach(isExitComplete => {\n          if (!isExitComplete) isEveryExitComplete = false;\n        });\n        if (isEveryExitComplete) {\n          forceRender === null || forceRender === void 0 ? void 0 : forceRender();\n          setRenderedChildren(pendingPresentChildren.current);\n          onExitComplete && onExitComplete();\n        }\n      };\n      return jsx(PresenceChild, {\n        isPresent: isPresent,\n        initial: !isInitialRender.current || initial ? undefined : false,\n        custom: isPresent ? undefined : custom,\n        presenceAffectsLayout: presenceAffectsLayout,\n        mode: mode,\n        onExitComplete: isPresent ? undefined : onExit,\n        children: child\n      }, key);\n    })\n  });\n};\nexport { AnimatePresence };","map":{"version":3,"names":["jsx","Fragment","useMemo","useRef","useState","useContext","PresenceChild","LayoutGroupContext","invariant","useConstant","onlyElements","getChildKey","useIsomorphicLayoutEffect","AnimatePresence","children","exitBeforeEnter","custom","initial","onExitComplete","presenceAffectsLayout","mode","presentChildren","presentKeys","map","isInitialRender","pendingPresentChildren","exitComplete","Map","diffedChildren","setDiffedChildren","renderedChildren","setRenderedChildren","current","i","length","key","includes","get","set","delete","join","exitingChildren","nextChildren","child","splice","push","process","env","NODE_ENV","console","warn","forceRender","isPresent","onExit","has","isEveryExitComplete","forEach","isExitComplete","undefined"],"sources":["D:/Programmer/Codi/Challenge/Magic/Master/ChallengeV-manhaufjf/node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs"],"sourcesContent":["import { jsx, Fragment } from 'react/jsx-runtime';\nimport { useMemo, useRef, useState, useContext } from 'react';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { invariant } from '../../utils/errors.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { onlyElements, getChildKey } from './utils.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, exitBeforeEnter, custom, initial = true, onExitComplete, presenceAffectsLayout = true, mode = \"sync\", }) => {\n    invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\");\n    /**\n     * Filter any children that aren't ReactElements. We can only track components\n     * between renders with a props.key.\n     */\n    const presentChildren = useMemo(() => onlyElements(children), [children]);\n    /**\n     * Track the keys of the currently rendered children. This is used to\n     * determine which children are exiting.\n     */\n    const presentKeys = presentChildren.map(getChildKey);\n    /**\n     * If `initial={false}` we only want to pass this to components in the first render.\n     */\n    const isInitialRender = useRef(true);\n    /**\n     * A ref containing the currently present children. When all exit animations\n     * are complete, we use this to re-render the component with the latest children\n     * *committed* rather than the latest children *rendered*.\n     */\n    const pendingPresentChildren = useRef(presentChildren);\n    /**\n     * Track which exiting children have finished animating out.\n     */\n    const exitComplete = useConstant(() => new Map());\n    /**\n     * Save children to render as React state. To ensure this component is concurrent-safe,\n     * we check for exiting children via an effect.\n     */\n    const [diffedChildren, setDiffedChildren] = useState(presentChildren);\n    const [renderedChildren, setRenderedChildren] = useState(presentChildren);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        pendingPresentChildren.current = presentChildren;\n        /**\n         * Update complete status of exiting children.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const key = getChildKey(renderedChildren[i]);\n            if (!presentKeys.includes(key)) {\n                if (exitComplete.get(key) !== true) {\n                    exitComplete.set(key, false);\n                }\n            }\n            else {\n                exitComplete.delete(key);\n            }\n        }\n    }, [renderedChildren, presentKeys.length, presentKeys.join(\"-\")]);\n    const exitingChildren = [];\n    if (presentChildren !== diffedChildren) {\n        let nextChildren = [...presentChildren];\n        /**\n         * Loop through all the currently rendered components and decide which\n         * are exiting.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const child = renderedChildren[i];\n            const key = getChildKey(child);\n            if (!presentKeys.includes(key)) {\n                nextChildren.splice(i, 0, child);\n                exitingChildren.push(child);\n            }\n        }\n        /**\n         * If we're in \"wait\" mode, and we have exiting children, we want to\n         * only render these until they've all exited.\n         */\n        if (mode === \"wait\" && exitingChildren.length) {\n            nextChildren = exitingChildren;\n        }\n        setRenderedChildren(onlyElements(nextChildren));\n        setDiffedChildren(presentChildren);\n        /**\n         * Early return to ensure once we've set state with the latest diffed\n         * children, we can immediately re-render.\n         */\n        return;\n    }\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        renderedChildren.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    /**\n     * If we've been provided a forceRender function by the LayoutGroupContext,\n     * we can use it to force a re-render amongst all surrounding components once\n     * all components have finished animating out.\n     */\n    const { forceRender } = useContext(LayoutGroupContext);\n    return (jsx(Fragment, { children: renderedChildren.map((child) => {\n            const key = getChildKey(child);\n            const isPresent = presentChildren === renderedChildren ||\n                presentKeys.includes(key);\n            const onExit = () => {\n                if (exitComplete.has(key)) {\n                    exitComplete.set(key, true);\n                }\n                else {\n                    return;\n                }\n                let isEveryExitComplete = true;\n                exitComplete.forEach((isExitComplete) => {\n                    if (!isExitComplete)\n                        isEveryExitComplete = false;\n                });\n                if (isEveryExitComplete) {\n                    forceRender === null || forceRender === void 0 ? void 0 : forceRender();\n                    setRenderedChildren(pendingPresentChildren.current);\n                    onExitComplete && onExitComplete();\n                }\n            };\n            return (jsx(PresenceChild, { isPresent: isPresent, initial: !isInitialRender.current || initial\n                    ? undefined\n                    : false, custom: isPresent ? undefined : custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode, onExitComplete: isPresent ? undefined : onExit, children: child }, key));\n        }) }));\n};\n\nexport { AnimatePresence };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}