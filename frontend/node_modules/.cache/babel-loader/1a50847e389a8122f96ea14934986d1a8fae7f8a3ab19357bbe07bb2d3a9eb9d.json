{"ast":null,"code":"import { transformPropOrder } from '../../html/utils/transform.mjs';\nimport { number } from '../../../value/types/numbers/index.mjs';\nimport { px } from '../../../value/types/numbers/units.mjs';\nconst positionalKeys = new Set([\"width\", \"height\", \"top\", \"left\", \"right\", \"bottom\", \"x\", \"y\", \"translateX\", \"translateY\"]);\nconst isNumOrPxType = v => v === number || v === px;\nconst getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3) => (_bbox, {\n  transform\n}) => {\n  if (transform === \"none\" || !transform) return 0;\n  const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/u);\n  if (matrix3d) {\n    return getPosFromMatrix(matrix3d[1], pos3);\n  } else {\n    const matrix = transform.match(/^matrix\\((.+)\\)$/u);\n    if (matrix) {\n      return getPosFromMatrix(matrix[1], pos2);\n    } else {\n      return 0;\n    }\n  }\n};\nconst transformKeys = new Set([\"x\", \"y\", \"z\"]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter(key => !transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n  const removedTransforms = [];\n  nonTranslationalTransformKeys.forEach(key => {\n    const value = visualElement.getValue(key);\n    if (value !== undefined) {\n      removedTransforms.push([key, value.get()]);\n      value.set(key.startsWith(\"scale\") ? 1 : 0);\n    }\n  });\n  return removedTransforms;\n}\nconst positionalValues = {\n  // Dimensions\n  width: ({\n    x\n  }, {\n    paddingLeft = \"0\",\n    paddingRight = \"0\"\n  }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),\n  height: ({\n    y\n  }, {\n    paddingTop = \"0\",\n    paddingBottom = \"0\"\n  }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),\n  top: (_bbox, {\n    top\n  }) => parseFloat(top),\n  left: (_bbox, {\n    left\n  }) => parseFloat(left),\n  bottom: ({\n    y\n  }, {\n    top\n  }) => parseFloat(top) + (y.max - y.min),\n  right: ({\n    x\n  }, {\n    left\n  }) => parseFloat(left) + (x.max - x.min),\n  // Transform\n  x: getTranslateFromMatrix(4, 13),\n  y: getTranslateFromMatrix(5, 14)\n};\n// Alias translate longform names\npositionalValues.translateX = positionalValues.x;\npositionalValues.translateY = positionalValues.y;\nexport { isNumOrPxType, positionalKeys, positionalValues, removeNonTranslationalTransform };","map":{"version":3,"names":["transformPropOrder","number","px","positionalKeys","Set","isNumOrPxType","v","getPosFromMatrix","matrix","pos","parseFloat","split","getTranslateFromMatrix","pos2","pos3","_bbox","transform","matrix3d","match","transformKeys","nonTranslationalTransformKeys","filter","key","has","removeNonTranslationalTransform","visualElement","removedTransforms","forEach","value","getValue","undefined","push","get","set","startsWith","positionalValues","width","x","paddingLeft","paddingRight","max","min","height","y","paddingTop","paddingBottom","top","left","bottom","right","translateX","translateY"],"sources":["D:/Programmer/Codi/Challenge/Magic/Merge/ChallengeVI-manhaufjf/node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs"],"sourcesContent":["import { transformPropOrder } from '../../html/utils/transform.mjs';\nimport { number } from '../../../value/types/numbers/index.mjs';\nimport { px } from '../../../value/types/numbers/units.mjs';\n\nconst positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n    \"translateX\",\n    \"translateY\",\n]);\nconst isNumOrPxType = (v) => v === number || v === px;\nconst getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {\n    if (transform === \"none\" || !transform)\n        return 0;\n    const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/u);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        const matrix = transform.match(/^matrix\\((.+)\\)$/u);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n};\nconst transformKeys = new Set([\"x\", \"y\", \"z\"]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n    const removedTransforms = [];\n    nonTranslationalTransformKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    return removedTransforms;\n}\nconst positionalValues = {\n    // Dimensions\n    width: ({ x }, { paddingLeft = \"0\", paddingRight = \"0\" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),\n    height: ({ y }, { paddingTop = \"0\", paddingBottom = \"0\" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),\n    top: (_bbox, { top }) => parseFloat(top),\n    left: (_bbox, { left }) => parseFloat(left),\n    bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),\n    right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\n// Alias translate longform names\npositionalValues.translateX = positionalValues.x;\npositionalValues.translateY = positionalValues.y;\n\nexport { isNumOrPxType, positionalKeys, positionalValues, removeNonTranslationalTransform };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}