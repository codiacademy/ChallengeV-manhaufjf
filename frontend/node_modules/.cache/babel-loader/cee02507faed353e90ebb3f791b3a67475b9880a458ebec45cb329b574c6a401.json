{"ast":null,"code":"import { appearStoreId } from './store-id.mjs';\nimport { animateStyle } from '../animators/waapi/index.mjs';\nimport { optimizedAppearDataId } from './data-id.mjs';\nimport { handoffOptimizedAppearAnimation } from './handoff.mjs';\nimport { appearAnimationStore, elementsWithAppearAnimations } from './store.mjs';\nimport { noop } from '../../utils/noop.mjs';\n\n/**\n * A single time to use across all animations to manually set startTime\n * and ensure they're all in sync.\n */\nlet startFrameTime;\n/**\n * A dummy animation to detect when Chrome is ready to start\n * painting the page and hold off from triggering the real animation\n * until then. We only need one animation to detect paint ready.\n *\n * https://bugs.chromium.org/p/chromium/issues/detail?id=1406850\n */\nlet readyAnimation;\nfunction startOptimizedAppearAnimation(element, name, keyframes, options, onReady) {\n  // Prevent optimised appear animations if Motion has already started animating.\n  if (window.MotionHandoffIsComplete) {\n    window.MotionHandoffAnimation = undefined;\n    return;\n  }\n  const id = element.dataset[optimizedAppearDataId];\n  if (!id) return;\n  window.MotionHandoffAnimation = handoffOptimizedAppearAnimation;\n  const storeId = appearStoreId(id, name);\n  if (!readyAnimation) {\n    readyAnimation = animateStyle(element, name, [keyframes[0], keyframes[0]],\n    /**\n     * 10 secs is basically just a super-safe duration to give Chrome\n     * long enough to get the animation ready.\n     */\n    {\n      duration: 10000,\n      ease: \"linear\"\n    });\n    appearAnimationStore.set(storeId, {\n      animation: readyAnimation,\n      startTime: null\n    });\n    /**\n     * If there's no readyAnimation then there's been no instantiation\n     * of handoff animations.\n     */\n    window.MotionHandoffAnimation = handoffOptimizedAppearAnimation;\n    /**\n     * We only need to cancel transform animations as\n     * they're the ones that will interfere with the\n     * layout animation measurements.\n     */\n    window.MotionHandoffCancelAll = () => {\n      appearAnimationStore.forEach(({\n        animation\n      }, animationId) => {\n        if (animationId.endsWith(\"transform\")) {\n          animation.cancel();\n          appearAnimationStore.delete(animationId);\n        }\n      });\n      window.MotionHandoffCancelAll = undefined;\n    };\n    /**\n     * Keep a map of elementIds that have started animating. We check\n     * via ID instead of Element because of hydration errors and\n     * pre-hydration checks. We also actively record IDs as they start\n     * animating rather than simply checking for data-appear-id as\n     * this attrbute might be present but not lead to an animation, for\n     * instance if the element's appear animation is on a different\n     * breakpoint.\n     */\n    window.MotionHasOptimisedAnimation = elementId => Boolean(elementId && elementsWithAppearAnimations.has(elementId));\n    window.MotionHasOptimisedTransformAnimation = elementId => Boolean(elementId && appearAnimationStore.has(appearStoreId(elementId, \"transform\")));\n  }\n  const startAnimation = () => {\n    readyAnimation.cancel();\n    const appearAnimation = animateStyle(element, name, keyframes, options);\n    /**\n     * Record the time of the first started animation. We call performance.now() once\n     * here and once in handoff to ensure we're getting\n     * close to a frame-locked time. This keeps all animations in sync.\n     */\n    if (startFrameTime === undefined) {\n      startFrameTime = performance.now();\n    }\n    appearAnimation.startTime = startFrameTime;\n    appearAnimationStore.set(storeId, {\n      animation: appearAnimation,\n      startTime: startFrameTime\n    });\n    if (onReady) onReady(appearAnimation);\n  };\n  elementsWithAppearAnimations.add(id);\n  if (readyAnimation.ready) {\n    readyAnimation.ready.then(startAnimation).catch(noop);\n  } else {\n    startAnimation();\n  }\n}\nexport { startOptimizedAppearAnimation };","map":{"version":3,"names":["appearStoreId","animateStyle","optimizedAppearDataId","handoffOptimizedAppearAnimation","appearAnimationStore","elementsWithAppearAnimations","noop","startFrameTime","readyAnimation","startOptimizedAppearAnimation","element","name","keyframes","options","onReady","window","MotionHandoffIsComplete","MotionHandoffAnimation","undefined","id","dataset","storeId","duration","ease","set","animation","startTime","MotionHandoffCancelAll","forEach","animationId","endsWith","cancel","delete","MotionHasOptimisedAnimation","elementId","Boolean","has","MotionHasOptimisedTransformAnimation","startAnimation","appearAnimation","performance","now","add","ready","then","catch"],"sources":["D:/Programmer/Codi/Challenge/Magic/Master/ChallengeV-manhaufjf/node_modules/framer-motion/dist/es/animation/optimized-appear/start.mjs"],"sourcesContent":["import { appearStoreId } from './store-id.mjs';\nimport { animateStyle } from '../animators/waapi/index.mjs';\nimport { optimizedAppearDataId } from './data-id.mjs';\nimport { handoffOptimizedAppearAnimation } from './handoff.mjs';\nimport { appearAnimationStore, elementsWithAppearAnimations } from './store.mjs';\nimport { noop } from '../../utils/noop.mjs';\n\n/**\n * A single time to use across all animations to manually set startTime\n * and ensure they're all in sync.\n */\nlet startFrameTime;\n/**\n * A dummy animation to detect when Chrome is ready to start\n * painting the page and hold off from triggering the real animation\n * until then. We only need one animation to detect paint ready.\n *\n * https://bugs.chromium.org/p/chromium/issues/detail?id=1406850\n */\nlet readyAnimation;\nfunction startOptimizedAppearAnimation(element, name, keyframes, options, onReady) {\n    // Prevent optimised appear animations if Motion has already started animating.\n    if (window.MotionHandoffIsComplete) {\n        window.MotionHandoffAnimation = undefined;\n        return;\n    }\n    const id = element.dataset[optimizedAppearDataId];\n    if (!id)\n        return;\n    window.MotionHandoffAnimation = handoffOptimizedAppearAnimation;\n    const storeId = appearStoreId(id, name);\n    if (!readyAnimation) {\n        readyAnimation = animateStyle(element, name, [keyframes[0], keyframes[0]], \n        /**\n         * 10 secs is basically just a super-safe duration to give Chrome\n         * long enough to get the animation ready.\n         */\n        { duration: 10000, ease: \"linear\" });\n        appearAnimationStore.set(storeId, {\n            animation: readyAnimation,\n            startTime: null,\n        });\n        /**\n         * If there's no readyAnimation then there's been no instantiation\n         * of handoff animations.\n         */\n        window.MotionHandoffAnimation = handoffOptimizedAppearAnimation;\n        /**\n         * We only need to cancel transform animations as\n         * they're the ones that will interfere with the\n         * layout animation measurements.\n         */\n        window.MotionHandoffCancelAll = () => {\n            appearAnimationStore.forEach(({ animation }, animationId) => {\n                if (animationId.endsWith(\"transform\")) {\n                    animation.cancel();\n                    appearAnimationStore.delete(animationId);\n                }\n            });\n            window.MotionHandoffCancelAll = undefined;\n        };\n        /**\n         * Keep a map of elementIds that have started animating. We check\n         * via ID instead of Element because of hydration errors and\n         * pre-hydration checks. We also actively record IDs as they start\n         * animating rather than simply checking for data-appear-id as\n         * this attrbute might be present but not lead to an animation, for\n         * instance if the element's appear animation is on a different\n         * breakpoint.\n         */\n        window.MotionHasOptimisedAnimation = (elementId) => Boolean(elementId && elementsWithAppearAnimations.has(elementId));\n        window.MotionHasOptimisedTransformAnimation = (elementId) => Boolean(elementId &&\n            appearAnimationStore.has(appearStoreId(elementId, \"transform\")));\n    }\n    const startAnimation = () => {\n        readyAnimation.cancel();\n        const appearAnimation = animateStyle(element, name, keyframes, options);\n        /**\n         * Record the time of the first started animation. We call performance.now() once\n         * here and once in handoff to ensure we're getting\n         * close to a frame-locked time. This keeps all animations in sync.\n         */\n        if (startFrameTime === undefined) {\n            startFrameTime = performance.now();\n        }\n        appearAnimation.startTime = startFrameTime;\n        appearAnimationStore.set(storeId, {\n            animation: appearAnimation,\n            startTime: startFrameTime,\n        });\n        if (onReady)\n            onReady(appearAnimation);\n    };\n    elementsWithAppearAnimations.add(id);\n    if (readyAnimation.ready) {\n        readyAnimation.ready.then(startAnimation).catch(noop);\n    }\n    else {\n        startAnimation();\n    }\n}\n\nexport { startOptimizedAppearAnimation };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}